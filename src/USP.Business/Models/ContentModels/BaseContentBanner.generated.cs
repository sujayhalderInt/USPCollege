//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace USP.Business.Models.ContentModels
{
	// Mixin content Type 1127 with alias "baseContentBanner"
	/// <summary>_Base Content Banner</summary>
	public partial interface IBaseContentBanner : IPublishedContent
	{
		/// <summary>Banner Heading</summary>
		string BannerHeading { get; }

		/// <summary>Banner Image</summary>
		IPublishedContent BannerImage { get; }

		/// <summary>Banner Summary</summary>
		string BannerSummary { get; }

		/// <summary>Overlay</summary>
		object Overlay { get; }
	}

	/// <summary>_Base Content Banner</summary>
	[PublishedContentModel("baseContentBanner")]
	public partial class BaseContentBanner : PublishedContentModel, IBaseContentBanner
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "baseContentBanner";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BaseContentBanner(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BaseContentBanner, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Banner Heading: H1 heading
		///</summary>
		[ImplementPropertyType("bannerHeading")]
		public string BannerHeading
		{
			get { return GetBannerHeading(this); }
		}

		/// <summary>Static getter for Banner Heading</summary>
		public static string GetBannerHeading(IBaseContentBanner that) { return that.GetPropertyValue<string>("bannerHeading"); }

		///<summary>
		/// Banner Image
		///</summary>
		[ImplementPropertyType("bannerImage")]
		public IPublishedContent BannerImage
		{
			get { return GetBannerImage(this); }
		}

		/// <summary>Static getter for Banner Image</summary>
		public static IPublishedContent GetBannerImage(IBaseContentBanner that) { return that.GetPropertyValue<IPublishedContent>("bannerImage"); }

		///<summary>
		/// Banner Summary: 80 characters max
		///</summary>
		[ImplementPropertyType("bannerSummary")]
		public string BannerSummary
		{
			get { return GetBannerSummary(this); }
		}

		/// <summary>Static getter for Banner Summary</summary>
		public static string GetBannerSummary(IBaseContentBanner that) { return that.GetPropertyValue<string>("bannerSummary"); }

		///<summary>
		/// Overlay
		///</summary>
		[ImplementPropertyType("overlay")]
		public object Overlay
		{
			get { return GetOverlay(this); }
		}

		/// <summary>Static getter for Overlay</summary>
		public static object GetOverlay(IBaseContentBanner that) { return that.GetPropertyValue("overlay"); }
	}
}
